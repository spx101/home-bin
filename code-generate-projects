#!/usr/bin/env python3
# -*- encoding: utf-8 -*-

import argparse
import os
import json


def generate_json_from_dirs(root_dir):
    # Pobranie nazw katalogów w głównym katalogu
    directories = [
        d for d in os.listdir(root_dir) if os.path.isdir(os.path.join(root_dir, d))
    ]
    # Sprawdzenie, czy w każdym katalogu jest .git
    directories = [
        d for d in directories if os.path.exists(os.path.join(root_dir, d, ".git"))
    ]
    # Generowanie JSON-a
    result = []
    for dir_name in directories:
        entry = {
            "name": dir_name,
            "rootPath": os.path.join(root_dir, dir_name),
            "paths": [],
            "tags": ["autogenerated"],
            "enabled": True,
        }
        result.append(entry)

    return result


def main():
    # args = arguments()
    root_directory = os.getcwd()
    generated_data = generate_json_from_dirs(root_directory)

    output_file = os.path.expanduser(
        "~/.config/Code/User/globalStorage/alefragnani.project-manager/projects.json"
    )
    with open(output_file, "w", encoding="utf-8") as f:
        json.dump(generated_data, f, indent=4)

    print(f"JSON wygenerowany w pliku: {output_file}")


def usage():
    return """
    pobieranie pull requestów z GitHuba
    """


def arguments():
    parser = argparse.ArgumentParser(
        description=("Fetching the list of pull requests from GitHub"),
        add_help=True,
        epilog="be happy ;)",
        usage=usage(),
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument("--test", dest="test", help="test", action="store_true")
    parser.add_argument(
        "-r", "--refresh", dest="refresh", help="Refresh", action="store_true"
    )
    args = parser.parse_args()
    return args


if __name__ == "__main__":
    main()
